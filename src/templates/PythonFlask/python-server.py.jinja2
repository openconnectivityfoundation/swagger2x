#############################
#
#    copyright 2016-2017 Open Interconnect Consortium, Inc. All rights reserved.
#    Redistribution and use in source and binary forms, with or without modification,
#    are permitted provided that the following conditions are met:
#    1.  Redistributions of source code must retain the above copyright notice,
#        this list of conditions and the following disclaimer.
#    2.  Redistributions in binary form must reproduce the above copyright notice,
#        this list of conditions and the following disclaimer in the documentation and/or other materials provided
#        with the distribution.
#         
#    THIS SOFTWARE IS PROVIDED BY THE OPEN INTERCONNECT CONSORTIUM, INC. "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
#    INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE OR
#    WARRANTIES OF NON-INFRINGEMENT, ARE DISCLAIMED. IN NO EVENT SHALL THE OPEN INTERCONNECT CONSORTIUM, INC. OR
#    CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#    OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#    OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
#    EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#############################
# tool_version          : {{version}}
# input_file            : {{input_file}}
# version of input_file : {{json_data['info']['version']}}
# title of input_file   : {{json_data['info']['title']}}

#!/usr/local/bin/python
# -*- coding: utf-8 -*-

import os
import shutil
import subprocess
import sys
import time
import threading
import json
from collections import OrderedDict 

from flask import Flask, render_template, jsonify, redirect, abort, request, send_from_directory, Response
app = Flask(__name__)


{% for path, path_data in json_data['paths'].items() %}
# global property variables for path: "{{path}}"
{% for var, var_data in query_properties_filtered(json_data, path).items() %}
# current value of property "{{var}}" 
g{{path|variablesyntax}}{{var|variablesyntax}} = {{swagger_property_data_schema(json_data, path, var)|init_value_if_empty(var_data.type) | replace('false','False')| replace('true','True')}} 
{% endfor -%} 
{% endfor -%} 

{% for path, path_data in json_data['paths'].items() -%}
#
# path {{ path }}
#
{% for methodName, method_data in path_data.items() %}
{% if methodName == "get" %} 
# method: {{methodName}}
@app.route('{{path}}', methods=['{{methodName}}'])
def {{methodName}}{{path|variablesyntax}}({{path_names(json_data, path)}}):
    # Method: {{methodName}}
    print (" {{path}} {{methodName}} ")
    response = {
    'rt': ["{{query_rt(json_data,path)}}"], 
    'if': {{query_if(json_data, path)}},
    {% for var, var_data in query_properties_filtered(json_data, path).items() -%}
    '{{var}}': g{{path|variablesyntax}}{{var|variablesyntax}}{{ "," if not loop.last }}
    {% endfor -%}
    }
    {% for var, var_data in query_properties_filtered(json_data, path).items() -%}
    print('  "{{var}}" = ', g{{path|variablesyntax}}{{var|variablesyntax}})
    {% endfor -%}
    
    return Response(json.dumps(response),  mimetype='application/json')
{% endif %}

{% if methodName == "post" %} 
# method: {{methodName}}
@app.route('{{path}}', methods=['{{methodName}}'])
def {{methodName}}{{path|variablesyntax}}({{path_names(json_data, path)}}):
    print (" {{path}} {{methodName}} ")
    req_data = request.get_json(force=True)

{% for var, var_data in query_properties_filtered_post(json_data, path).items() %}
    if "{{var}}" in req_data.keys():
        # assign "{{var}}" 
        print (" {{var}} = ", req_data.get("{{var}}"))
        global g{{path|variablesyntax}}{{var|variablesyntax}}
        g{{path|variablesyntax}}{{var|variablesyntax}} = req_data.get("{{var}}");
{% endfor %}

    response = {
    'rt': ["{{query_rt(json_data,path)}}"], 
    'if': [{{query_if(json_data, path)}}],
    {% for var, var_data in query_properties_filtered(json_data, path).items() -%}
    '{{var}}': g{{path|variablesyntax}}{{var|variablesyntax}}
    {% endfor -%}
    }
    
    return Response(json.dumps(response),  mimetype='application/json')
{% endif %}

{% endfor -%}
{% endfor %}



# method: get
@app.route('/introspection', methods=['get'])
def get_introspection():
    print (" /introspection get ")
    response_200 = { 'rt': ['oic.wk.introspection'], 'if': ["oic.if.r", "oic.if.baseline"], 
                      "urlInfo": [ { "content-type": "application/json", "protocol": "http", "url": "/introspectionfile"}] }

    return Response(json.dumps(response_200),  mimetype='application/json')

# method: get
@app.route('/introspectionfile', methods=['get'])
def get_introspectionfile():
    print (" /introspectionfile get ")
    with open('../out_introspection_merged.swagger.json') as f:
        data = json.load(f)
    return Response(json.dumps(data),  mimetype='application/json')


# method: get
@app.route('/oic/res', methods=['get'])
def get_oic_res():

    response_200 = [{ "href": "/oic/res",  'rt': ['oic.wk.res'], 'if': ['oic.if.a', 'oic.if.baseline'], "rel":  ["self"]},
    { "href": "/introspection",  'rt': ['oic.wk.introspection'], 'if': ['oic.if.r', 'oic.if.baseline']}
{% for path, path_data in json_data['paths'].items() -%}
,{ "href": "{{path}}",  'rt': ["{{query_rt(json_data,path)}}"], 'if': [{{query_if(json_data, path)}}]}
{% endfor -%}
    ]
    return Response(json.dumps(response_200),  mimetype='application/json')

if __name__ == '__main__':

    HOST_NAME = 'localhost';
    SERVER_PORT = 8888;

    # set the execution path of the tool
    if hasattr(sys, 'frozen'):
        my_dir = os.path.dirname(sys.executable)
    else:
        my_dir = os.path.dirname(sys.argv[0])

    if my_dir:
        os.chdir(my_dir)

    app.run(host=HOST_NAME, port=int(SERVER_PORT), debug=True)
    #app.run(use_debugger=True)
